#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 22 10:06:27 2022

@author: willstoll
"""

import numpy as np
import matplotlib.pyplot as plt
import csv

# File paths
sample_file = r"F:/Toptica Temp/MT_Pyrene_VT/298_Sample.pulse.csv"
blank_file = r"F:/Toptica Temp/MT_Pyrene_VT/298_Blank.pulse.csv"

output_file = r"F:/Toptica Temp/CuTA_2/298_90nm.csv"



# Function to read and clean data
def read_data(file_path):
    time_data, pulse_data, trash = [], [], []
    
    with open(file_path, "r") as infile:
        for line in infile:
            try:
                # Only process the first two columns
                time, pulse, *_ = line.strip().split(",")
                time_data.append(float(time))
                pulse_data.append(float(pulse))
            except ValueError:
                trash.append(line)
    
    return time_data, pulse_data, trash

# Read and clean sample and blank data
time_sample, pulse_sample, trash_sample = read_data(sample_file)
time_blank, pulse_blank, trash_blank = read_data(blank_file)

# Print deleted lines
print(f"Sample trash lines: {trash_sample}")
print(f"Blank trash lines: {trash_blank}")

# Timecut the data
timecut = 25
index = list(range(timecut * 20, len(time_sample)))

time_sample = np.delete(time_sample, index).tolist()
time_blank = np.delete(time_blank, index).tolist()
pulse_sample = np.delete(pulse_sample, index).tolist()
pulse_blank = np.delete(pulse_blank, index).tolist()

# HANN correction
length = len(time_sample)
ymax = pulse_sample.index(max(pulse_sample))
shift = (length - 2 * ymax)
shift_time = shift / 20.0

# Adjust time and pulse data
time_start = np.arange(time_sample[0] - shift_time, time_sample[0], 0.05).tolist()
time_sample = time_start + time_sample
time_blank = time_start + time_blank

pulse_sample = [0] * len(time_start) + pulse_sample
pulse_blank = [0] * len(time_start) + pulse_blank

# Fourier transform
def fft_transform(time, pulse):
    mintime = min(time)
    signal = np.array(time) - mintime

    zeropoints = 8000
    n = len(signal) + 2 * zeropoints
    timestep = 0.05
    freq = np.fft.fftfreq(n, d=timestep)

    N = len(pulse)
    psig = np.array(pulse)
    window = np.hanning(N)
    windowed_signal = psig * window

    tobefft = np.pad(windowed_signal, (zeropoints, zeropoints), 'constant')
    outp = np.fft.fft(tobefft)

    return freq, outp, windowed_signal, window

# Perform FFT
freq_blank, mag_blank, _, _ = fft_transform(time_blank, pulse_blank)
freq_sample, mag_sample, windowed_signal_sample, window = fft_transform(time_sample, pulse_sample)

# Calculate absorbance
absorbance = 2 * np.log10(np.abs(mag_blank) / np.abs(mag_sample))

# Plotting the data
def plot_data(freq, absorbance):
    plt.plot(freq, absorbance, "r", label="78")
    plt.ylabel('Absorbance')
    plt.xlabel('THz')
    plt.tight_layout()

    ax = plt.gca()
    ax.set_xlim(0, 5)
    ax.set_ylim(-0.1, 1)
    plt.legend()
    plt.grid(True)
    plt.title('MT-Pyrene')
    plt.savefig("C:/Users/wbsst/Desktop/temp.jpg", dpi=500)
    plt.show()

plot_data(np.abs(freq_sample), absorbance)

# Export data
with open(output_file, "w", newline="") as outfile:
    writer = csv.writer(outfile)
    for i in range(len(absorbance)):
        writer.writerow([freq_sample[i].real, absorbance[i].real])

